classdef System

    properties
        Number_of_Spatial_Orbitals
        Number_of_Spin_Up_Electrons 
        Number_of_Spin_Down_Electrons
    end

    methods
        function obj = System(Number_of_Spatial_Orbitals,Number_of_Spin_Up_Electrons,Number_of_Spin_Down_Electrons)
            obj.Number_of_Spatial_Orbitals = Number_of_Spatial_Orbitals;
            obj.Number_of_Spin_Up_Electrons = Number_of_Spin_Up_Electrons;
            obj.Number_of_Spin_Down_Electrons = Number_of_Spin_Down_Electrons;
        end

        function up_array_matrix = get_up_spin_arrays(obj)
            up_array_matrix = nchoosek(1:obj.Number_of_Spatial_Orbitals,obj.Number_of_Spin_Up_Electrons);
            return
        end

        function down_array_matrix = get_down_spin_arrays(obj)
            down_array_matrix = nchoosek(1:obj.Number_of_Spatial_Orbitals,obj.Number_of_Spin_Down_Electrons);
            return
        end

        function basis_states = get_basis_states(obj)
            up_array_matrix = get_up_spin_arrays(obj);
            down_array_matrix = get_down_spin_arrays(obj);

            [numRows_for_up,numCols_for_up] = size(up_array_matrix);
            [numRows_for_down,numCols_for_down] = size(down_array_matrix);

            basis_states = zeros(1,numRows_for_up*numRows_for_down);

            counter = 1;

            for up_row = 1:numRows_for_up
                up_array = zeros()
                for up_col = 1:numCols_for_up

                end
                for down_row = 1:numRows_for_down
                    basis_states(1,counter) = OrderedOccupationState(1,up_array,down_array);
                    counter = counter + 1;
                end
            end

            return

        end

    end
end